{
  "elapsed_ms": 20, 
  "file_info_response": [
    {
      "file_info": {
        "gob_info": {
          "repo": "chromium/chromium/src", 
          "commit": "eca9e3231355e561117f767c424c65ed9f484bcd", 
          "path": "net/http/http_auth.cc"
        }, 
        "name": "src/net/http/http_auth.cc", 
        "language": "c++", 
        "changelist_num": "eca9e3231355e561117f767c424c65ed9f484bcd", 
        "package_name": "chromium", 
        "lines": "145", 
        "content": {
          "text": "// Copyright (c) 2011 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#include \"net/http/http_auth.h\"\n\n#include <algorithm>\n\n#include \"base/strings/string_tokenizer.h\"\n#include \"base/strings/string_util.h\"\n#include \"net/base/net_errors.h\"\n#include \"net/http/http_auth_challenge_tokenizer.h\"\n#include \"net/http/http_auth_handler.h\"\n#include \"net/http/http_auth_handler_factory.h\"\n#include \"net/http/http_auth_scheme.h\"\n#include \"net/http/http_request_headers.h\"\n#include \"net/http/http_response_headers.h\"\n#include \"net/http/http_util.h\"\n\nnamespace net {\n\nHttpAuth::Identity::Identity() : source(IDENT_SRC_NONE), invalid(true) {}\n\n// static\nvoid HttpAuth::ChooseBestChallenge(\n    HttpAuthHandlerFactory* http_auth_handler_factory,\n    const HttpResponseHeaders& response_headers,\n    const SSLInfo& ssl_info,\n    Target target,\n    const GURL& origin,\n    const std::set<Scheme>& disabled_schemes,\n    const NetLogWithSource& net_log,\n    std::unique_ptr<HttpAuthHandler>* handler) {\n  DCHECK(http_auth_handler_factory);\n  DCHECK(handler->get() == NULL);\n\n  // Choose the challenge whose authentication handler gives the maximum score.\n  std::unique_ptr<HttpAuthHandler> best;\n  const std::string header_name = GetChallengeHeaderName(target);\n  std::string cur_challenge;\n  size_t iter = 0;\n  while (response_headers.EnumerateHeader(&iter, header_name, &cur_challenge)) {\n    std::unique_ptr<HttpAuthHandler> cur;\n    int rv = http_auth_handler_factory->CreateAuthHandlerFromString(\n        cur_challenge, target, ssl_info, origin, net_log, &cur);\n    if (rv != OK) {\n      VLOG(1) << \"Unable to create AuthHandler. Status: \"\n              << ErrorToString(rv) << \" Challenge: \" << cur_challenge;\n      continue;\n    }\n    if (cur.get() && (!best.get() || best->score() < cur->score()) &&\n        (disabled_schemes.find(cur->auth_scheme()) == disabled_schemes.end()))\n      best.swap(cur);\n  }\n  handler->swap(best);\n}\n\n// static\nHttpAuth::AuthorizationResult HttpAuth::HandleChallengeResponse(\n    HttpAuthHandler* handler,\n    const HttpResponseHeaders& response_headers,\n    Target target,\n    const std::set<Scheme>& disabled_schemes,\n    std::string* challenge_used) {\n  DCHECK(handler);\n  DCHECK(challenge_used);\n  challenge_used->clear();\n  HttpAuth::Scheme current_scheme = handler->auth_scheme();\n  if (disabled_schemes.find(current_scheme) != disabled_schemes.end())\n    return HttpAuth::AUTHORIZATION_RESULT_REJECT;\n  std::string current_scheme_name = SchemeToString(current_scheme);\n  const std::string header_name = GetChallengeHeaderName(target);\n  size_t iter = 0;\n  std::string challenge;\n  HttpAuth::AuthorizationResult authorization_result =\n      HttpAuth::AUTHORIZATION_RESULT_INVALID;\n  while (response_headers.EnumerateHeader(&iter, header_name, &challenge)) {\n    HttpAuthChallengeTokenizer props(challenge.begin(), challenge.end());\n    if (!base::LowerCaseEqualsASCII(props.scheme(),\n                                    current_scheme_name.c_str()))\n      continue;\n    authorization_result = handler->HandleAnotherChallenge(&props);\n    if (authorization_result != HttpAuth::AUTHORIZATION_RESULT_INVALID) {\n      *challenge_used = challenge;\n      return authorization_result;\n    }\n  }\n  // Finding no matches is equivalent to rejection.\n  return HttpAuth::AUTHORIZATION_RESULT_REJECT;\n}\n\n// static\nstd::string HttpAuth::GetChallengeHeaderName(Target target) {\n  switch (target) {\n    case AUTH_PROXY:\n      return \"Proxy-Authenticate\";\n    case AUTH_SERVER:\n      return \"WWW-Authenticate\";\n    default:\n      NOTREACHED();\n      return std::string();\n  }\n}\n\n// static\nstd::string HttpAuth::GetAuthorizationHeaderName(Target target) {\n  switch (target) {\n    case AUTH_PROXY:\n      return HttpRequestHeaders::kProxyAuthorization;\n    case AUTH_SERVER:\n      return HttpRequestHeaders::kAuthorization;\n    default:\n      NOTREACHED();\n      return std::string();\n  }\n}\n\n// static\nstd::string HttpAuth::GetAuthTargetString(Target target) {\n  switch (target) {\n    case AUTH_PROXY:\n      return \"proxy\";\n    case AUTH_SERVER:\n      return \"server\";\n    default:\n      NOTREACHED();\n      return std::string();\n  }\n}\n\n// static\nconst char* HttpAuth::SchemeToString(Scheme scheme) {\n  static const char* const kSchemeNames[] = {\n      kBasicAuthScheme,     kDigestAuthScheme,    kNtlmAuthScheme,\n      kNegotiateAuthScheme, kSpdyProxyAuthScheme, kMockAuthScheme};\n  static_assert(arraysize(kSchemeNames) == AUTH_SCHEME_MAX,\n                \"http auth scheme names incorrect size\");\n  if (scheme < AUTH_SCHEME_BASIC || scheme >= AUTH_SCHEME_MAX) {\n    NOTREACHED();\n    return \"invalid_scheme\";\n  }\n  return kSchemeNames[scheme];\n}\n\n}  // namespace net\n"
        }, 
        "generated": false, 
        "mime_type": "text/plain", 
        "size": "4775", 
        "type": 1, 
        "md5": "1ef714d7c42e0381233a338869376e7a", 
        "codeblock": [
          {
            "child": [
              {
                "name_prefix": "HttpAuth::Identity::", 
                "type": 8, 
                "name": "Identity", 
                "text_range": {
                  "start_line": 22, 
                  "end_line": 22, 
                  "start_column": 1, 
                  "end_column": 74
                }, 
                "signature": "()"
              }, 
              {
                "name_prefix": "HttpAuth::", 
                "type": 8, 
                "name": "ChooseBestChallenge", 
                "text_range": {
                  "start_line": 25, 
                  "end_line": 56, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "signature": "(HttpAuthHandlerFactory* http_auth_handler_factory, const HttpResponseHeaders& response_headers, const SSLInfo& ssl_info, Target target, const GURL& origin, const std::set<Scheme>& disabled_schemes, const NetLogWithSource& net_log, std::unique_ptr<HttpAuthHandler>* handler)"
              }, 
              {
                "name_prefix": "HttpAuth::", 
                "type": 8, 
                "name": "HandleChallengeResponse", 
                "text_range": {
                  "start_line": 59, 
                  "end_line": 90, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "signature": "(HttpAuthHandler* handler, const HttpResponseHeaders& response_headers, Target target, const std::set<Scheme>& disabled_schemes, std::string* challenge_used)"
              }, 
              {
                "name_prefix": "HttpAuth::", 
                "type": 8, 
                "name": "GetChallengeHeaderName", 
                "text_range": {
                  "start_line": 93, 
                  "end_line": 103, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "signature": "(Target target)"
              }, 
              {
                "name_prefix": "HttpAuth::", 
                "type": 8, 
                "name": "GetAuthorizationHeaderName", 
                "text_range": {
                  "start_line": 106, 
                  "end_line": 116, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "signature": "(Target target)"
              }, 
              {
                "name_prefix": "HttpAuth::", 
                "type": 8, 
                "name": "GetAuthTargetString", 
                "text_range": {
                  "start_line": 119, 
                  "end_line": 129, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "signature": "(Target target)"
              }, 
              {
                "name_prefix": "HttpAuth::", 
                "type": 8, 
                "name": "SchemeToString", 
                "text_range": {
                  "start_line": 132, 
                  "end_line": 143, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "signature": "(Scheme scheme)"
              }
            ], 
            "type": 11, 
            "name": "net", 
            "text_range": {
              "start_line": 20, 
              "end_line": 145, 
              "start_column": 1, 
              "end_column": 2
            }, 
            "signature": ""
          }
        ]
      }, 
      "return_code": 1
    }
  ]
}