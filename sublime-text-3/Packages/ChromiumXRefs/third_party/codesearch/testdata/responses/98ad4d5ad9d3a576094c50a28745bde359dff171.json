{
  "elapsed_ms": 23, 
  "file_info_response": [
    {
      "file_info": {
        "gob_info": {
          "repo": "chromium/chromium/src", 
          "commit": "8d737563f986f1ece3016211a26aae2c323ae73d", 
          "path": "net/http/http_transaction.h"
        }, 
        "name": "src/net/http/http_transaction.h", 
        "language": "c++", 
        "changelist_num": "8d737563f986f1ece3016211a26aae2c323ae73d", 
        "package_name": "chromium", 
        "lines": "210", 
        "content": {
          "text": "// Copyright (c) 2011 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#ifndef NET_HTTP_HTTP_TRANSACTION_H_\n#define NET_HTTP_HTTP_TRANSACTION_H_\n\n#include <stdint.h>\n\n#include \"net/base/completion_callback.h\"\n#include \"net/base/load_states.h\"\n#include \"net/base/net_error_details.h\"\n#include \"net/base/net_export.h\"\n#include \"net/base/request_priority.h\"\n#include \"net/base/upload_progress.h\"\n#include \"net/http/http_raw_request_headers.h\"\n#include \"net/http/http_response_headers.h\"\n#include \"net/socket/connection_attempts.h\"\n#include \"net/websockets/websocket_handshake_stream_base.h\"\n\nnamespace net {\n\nclass AuthCredentials;\nclass HttpRequestHeaders;\nstruct HttpRequestInfo;\nclass HttpResponseInfo;\nclass IOBuffer;\nstruct LoadTimingInfo;\nclass NetLogWithSource;\nclass ProxyInfo;\nclass QuicServerInfo;\nclass SSLPrivateKey;\nclass X509Certificate;\n\n// Represents a single HTTP transaction (i.e., a single request/response pair).\n// HTTP redirects are not followed and authentication challenges are not\n// answered.  Cookies are assumed to be managed by the caller.\nclass NET_EXPORT_PRIVATE HttpTransaction {\n public:\n  // If |*defer| is set to true, the transaction will wait until\n  // ResumeNetworkStart is called before establishing a connection.\n  typedef base::Callback<void(bool* defer)> BeforeNetworkStartCallback;\n\n  // Provides an opportunity to add additional request headers. Called after\n  // a connection is established and before the request headers are sent.\n  // |proxy_info| contains information about any proxies being used, and\n  // additional headers may be added to |request_headers|.\n  typedef base::Callback<void(const ProxyInfo& proxy_info,\n                              HttpRequestHeaders* request_headers)>\n      BeforeHeadersSentCallback;\n\n  // Stops any pending IO and destroys the transaction object.\n  virtual ~HttpTransaction() {}\n\n  // Starts the HTTP transaction (i.e., sends the HTTP request).\n  //\n  // TODO(crbug.com/723786) The consumer should ensure that request_info points\n  // to a valid value till final response headers are received; after that\n  // point, the HttpTransaction will not access |*request_info| and it may be\n  // deleted.\n  //\n  // Returns OK if the transaction could be started synchronously, which means\n  // that the request was served from the cache.  ERR_IO_PENDING is returned to\n  // indicate that the CompletionCallback will be notified once response info is\n  // available or if an IO error occurs.  Any other return value indicates that\n  // the transaction could not be started.\n  //\n  // Regardless of the return value, the caller is expected to keep the\n  // request_info object alive until Destroy is called on the transaction.\n  //\n  // NOTE: The transaction is not responsible for deleting the callback object.\n  //\n  // Profiling information for the request is saved to |net_log| if non-NULL.\n  virtual int Start(const HttpRequestInfo* request_info,\n                    const CompletionCallback& callback,\n                    const NetLogWithSource& net_log) = 0;\n\n  // Restarts the HTTP transaction, ignoring the last error.  This call can\n  // only be made after a call to Start (or RestartIgnoringLastError) failed.\n  // Once Read has been called, this method cannot be called.  This method is\n  // used, for example, to continue past various SSL related errors.\n  //\n  // Not all errors can be ignored using this method.  See error code\n  // descriptions for details about errors that can be ignored.\n  //\n  // NOTE: The transaction is not responsible for deleting the callback object.\n  //\n  virtual int RestartIgnoringLastError(const CompletionCallback& callback) = 0;\n\n  // Restarts the HTTP transaction with a client certificate.\n  virtual int RestartWithCertificate(\n      scoped_refptr<X509Certificate> client_cert,\n      scoped_refptr<SSLPrivateKey> client_private_key,\n      const CompletionCallback& callback) = 0;\n\n  // Restarts the HTTP transaction with authentication credentials.\n  virtual int RestartWithAuth(const AuthCredentials& credentials,\n                              const CompletionCallback& callback) = 0;\n\n  // Returns true if auth is ready to be continued. Callers should check\n  // this value anytime Start() completes: if it is true, the transaction\n  // can be resumed with RestartWithAuth(L\"\", L\"\", callback) to resume\n  // the automatic auth exchange. This notification gives the caller a\n  // chance to process the response headers from all of the intermediate\n  // restarts needed for authentication.\n  virtual bool IsReadyToRestartForAuth() = 0;\n\n  // Once response info is available for the transaction, response data may be\n  // read by calling this method.\n  //\n  // Response data is copied into the given buffer and the number of bytes\n  // copied is returned.  ERR_IO_PENDING is returned if response data is not\n  // yet available.  The CompletionCallback is notified when the data copy\n  // completes, and it is passed the number of bytes that were successfully\n  // copied.  Or, if a read error occurs, the CompletionCallback is notified of\n  // the error.  Any other negative return value indicates that the transaction\n  // could not be read.\n  //\n  // NOTE: The transaction is not responsible for deleting the callback object.\n  // If the operation is not completed immediately, the transaction must acquire\n  // a reference to the provided buffer.\n  //\n  virtual int Read(IOBuffer* buf, int buf_len,\n                   const CompletionCallback& callback) = 0;\n\n  // Stops further caching of this request by the HTTP cache, if there is any.\n  // Note that this is merely a hint to the transaction which it may choose to\n  // ignore.\n  virtual void StopCaching() = 0;\n\n  // Gets the full request headers sent to the server.  This is guaranteed to\n  // work only if Start returns success and the underlying transaction supports\n  // it.  (Right now, this is only network transactions, not cache ones.)\n  //\n  // Returns true and overwrites headers if it can get the request headers;\n  // otherwise, returns false and does not modify headers.\n  virtual bool GetFullRequestHeaders(HttpRequestHeaders* headers) const = 0;\n\n  // Get the number of bytes received from network.\n  virtual int64_t GetTotalReceivedBytes() const = 0;\n\n  // Get the number of bytes sent over the network.\n  virtual int64_t GetTotalSentBytes() const = 0;\n\n  // Called to tell the transaction that we have successfully reached the end\n  // of the stream. This is equivalent to performing an extra Read() at the end\n  // that should return 0 bytes. This method should not be called if the\n  // transaction is busy processing a previous operation (like a pending Read).\n  //\n  // DoneReading may also be called before the first Read() to notify that the\n  // entire response body is to be ignored (e.g., in a redirect).\n  virtual void DoneReading() = 0;\n\n  // Returns the response info for this transaction. Must not be called until\n  // |Start| completes.\n  virtual const HttpResponseInfo* GetResponseInfo() const = 0;\n\n  // Returns the load state for this transaction.\n  virtual LoadState GetLoadState() const = 0;\n\n  // SetQuicServerInfo sets a object which reads and writes public information\n  // about a QUIC server.\n  virtual void SetQuicServerInfo(QuicServerInfo* quic_server_info) = 0;\n\n  // Populates all of load timing, except for request start times and receive\n  // headers time.\n  // |load_timing_info| must have all null times when called.  Returns false and\n  // does not modify |load_timing_info| if there's no timing information to\n  // provide.\n  virtual bool GetLoadTimingInfo(LoadTimingInfo* load_timing_info) const = 0;\n\n  // Gets the remote endpoint of the socket that the transaction's underlying\n  // stream is using or did use, if any. Returns true and fills in |endpoint|\n  // if it is available; returns false and leaves |endpoint| unchanged if it is\n  // unavailable.\n  virtual bool GetRemoteEndpoint(IPEndPoint* endpoint) const = 0;\n\n  // Populates network error details for this transaction.\n  virtual void PopulateNetErrorDetails(NetErrorDetails* details) const = 0;\n\n  // Called when the priority of the parent job changes.\n  virtual void SetPriority(RequestPriority priority) = 0;\n\n  // Set the WebSocketHandshakeStreamBase::CreateHelper to be used for the\n  // request.  Only relevant to WebSocket transactions. Must be called before\n  // Start(). Ownership of |create_helper| remains with the caller.\n  virtual void SetWebSocketHandshakeStreamCreateHelper(\n      WebSocketHandshakeStreamBase::CreateHelper* create_helper) = 0;\n\n  // Sets the callback to receive notification just before network use.\n  virtual void SetBeforeNetworkStartCallback(\n      const BeforeNetworkStartCallback& callback) = 0;\n\n  // Sets the callback to receive notification just before request headers\n  // are to be sent.\n  virtual void SetBeforeHeadersSentCallback(\n      const BeforeHeadersSentCallback& callback) = 0;\n\n  virtual void SetRequestHeadersCallback(RequestHeadersCallback callback) = 0;\n  virtual void SetResponseHeadersCallback(ResponseHeadersCallback callback) = 0;\n\n  // Resumes the transaction after being deferred.\n  virtual int ResumeNetworkStart() = 0;\n\n  virtual void GetConnectionAttempts(ConnectionAttempts* out) const = 0;\n};\n\n}  // namespace net\n\n#endif  // NET_HTTP_HTTP_TRANSACTION_H_\n"
        }, 
        "generated": false, 
        "mime_type": "text/plain", 
        "size": "9415", 
        "type": 1, 
        "md5": "9e5a36f9a75c032e75890eddaf6ba465", 
        "codeblock": [
          {
            "type": 40, 
            "name": "NET_HTTP_HTTP_TRANSACTION_H_", 
            "text_range": {
              "start_line": 6, 
              "end_line": 7, 
              "start_column": 1, 
              "end_column": 1
            }, 
            "signature": ""
          }, 
          {
            "child": [
              {
                "name": "HttpTransaction", 
                "signature": "", 
                "child": [
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "BeforeNetworkStartCallback", 
                    "signature": "", 
                    "name_prefix": "", 
                    "type": 10, 
                    "text_range": {
                      "start_line": 42, 
                      "end_line": 42, 
                      "start_column": 3, 
                      "end_column": 72
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "BeforeHeadersSentCallback", 
                    "signature": "", 
                    "name_prefix": "", 
                    "type": 10, 
                    "text_range": {
                      "start_line": 48, 
                      "end_line": 50, 
                      "start_column": 3, 
                      "end_column": 33
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "~HttpTransaction", 
                    "signature": "()", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 53, 
                      "end_line": 53, 
                      "start_column": 3, 
                      "end_column": 32
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "Start", 
                    "signature": "(const HttpRequestInfo* request_info, const CompletionCallback& callback, const NetLogWithSource& net_log)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 74, 
                      "end_line": 76, 
                      "start_column": 3, 
                      "end_column": 58
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "RestartIgnoringLastError", 
                    "signature": "(const CompletionCallback& callback)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 88, 
                      "end_line": 88, 
                      "start_column": 3, 
                      "end_column": 80
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "RestartWithCertificate", 
                    "signature": "(scoped_refptr<X509Certificate> client_cert, scoped_refptr<SSLPrivateKey> client_private_key, const CompletionCallback& callback)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 91, 
                      "end_line": 94, 
                      "start_column": 3, 
                      "end_column": 47
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "RestartWithAuth", 
                    "signature": "(const AuthCredentials& credentials, const CompletionCallback& callback)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 97, 
                      "end_line": 98, 
                      "start_column": 3, 
                      "end_column": 71
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "IsReadyToRestartForAuth", 
                    "signature": "()", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 106, 
                      "end_line": 106, 
                      "start_column": 3, 
                      "end_column": 46
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "Read", 
                    "signature": "(IOBuffer* buf, int buf_len, const CompletionCallback& callback)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 123, 
                      "end_line": 124, 
                      "start_column": 3, 
                      "end_column": 60
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "StopCaching", 
                    "signature": "()", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 129, 
                      "end_line": 129, 
                      "start_column": 3, 
                      "end_column": 34
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "GetFullRequestHeaders", 
                    "signature": "(HttpRequestHeaders* headers)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 137, 
                      "end_line": 137, 
                      "start_column": 3, 
                      "end_column": 77
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "GetTotalReceivedBytes", 
                    "signature": "()", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 140, 
                      "end_line": 140, 
                      "start_column": 3, 
                      "end_column": 53
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "GetTotalSentBytes", 
                    "signature": "()", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 143, 
                      "end_line": 143, 
                      "start_column": 3, 
                      "end_column": 49
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "DoneReading", 
                    "signature": "()", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 152, 
                      "end_line": 152, 
                      "start_column": 3, 
                      "end_column": 34
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "GetResponseInfo", 
                    "signature": "()", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 156, 
                      "end_line": 156, 
                      "start_column": 3, 
                      "end_column": 63
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "GetLoadState", 
                    "signature": "()", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 159, 
                      "end_line": 159, 
                      "start_column": 3, 
                      "end_column": 46
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "SetQuicServerInfo", 
                    "signature": "(QuicServerInfo* quic_server_info)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 163, 
                      "end_line": 163, 
                      "start_column": 3, 
                      "end_column": 72
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "GetLoadTimingInfo", 
                    "signature": "(LoadTimingInfo* load_timing_info)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 170, 
                      "end_line": 170, 
                      "start_column": 3, 
                      "end_column": 78
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "GetRemoteEndpoint", 
                    "signature": "(IPEndPoint* endpoint)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 176, 
                      "end_line": 176, 
                      "start_column": 3, 
                      "end_column": 66
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "PopulateNetErrorDetails", 
                    "signature": "(NetErrorDetails* details)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 179, 
                      "end_line": 179, 
                      "start_column": 3, 
                      "end_column": 76
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "SetPriority", 
                    "signature": "(RequestPriority priority)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 182, 
                      "end_line": 182, 
                      "start_column": 3, 
                      "end_column": 58
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "SetWebSocketHandshakeStreamCreateHelper", 
                    "signature": "(WebSocketHandshakeStreamBase::CreateHelper* create_helper)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 187, 
                      "end_line": 188, 
                      "start_column": 3, 
                      "end_column": 70
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "SetBeforeNetworkStartCallback", 
                    "signature": "(const BeforeNetworkStartCallback& callback)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 191, 
                      "end_line": 192, 
                      "start_column": 3, 
                      "end_column": 55
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "SetBeforeHeadersSentCallback", 
                    "signature": "(const BeforeHeadersSentCallback& callback)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 196, 
                      "end_line": 197, 
                      "start_column": 3, 
                      "end_column": 54
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "SetRequestHeadersCallback", 
                    "signature": "(RequestHeadersCallback callback)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 199, 
                      "end_line": 199, 
                      "start_column": 3, 
                      "end_column": 79
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "SetResponseHeadersCallback", 
                    "signature": "(ResponseHeadersCallback callback)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 200, 
                      "end_line": 200, 
                      "start_column": 3, 
                      "end_column": 81
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "ResumeNetworkStart", 
                    "signature": "()", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 203, 
                      "end_line": 203, 
                      "start_column": 3, 
                      "end_column": 40
                    }
                  }, 
                  {
                    "modifiers": {
                      "public": true
                    }, 
                    "name": "GetConnectionAttempts", 
                    "signature": "(ConnectionAttempts* out)", 
                    "name_prefix": "", 
                    "type": 8, 
                    "text_range": {
                      "start_line": 205, 
                      "end_line": 205, 
                      "start_column": 3, 
                      "end_column": 73
                    }
                  }
                ], 
                "name_prefix": "", 
                "type": 1, 
                "text_range": {
                  "start_line": 38, 
                  "end_line": 206, 
                  "start_column": 1, 
                  "end_column": 2
                }
              }
            ], 
            "type": 11, 
            "name": "net", 
            "text_range": {
              "start_line": 21, 
              "end_line": 208, 
              "start_column": 1, 
              "end_column": 2
            }, 
            "signature": ""
          }
        ]
      }, 
      "return_code": 1
    }
  ]
}