{
  "elapsed_ms": 15, 
  "file_info_response": [
    {
      "file_info": {
        "gob_info": {
          "repo": "chromium/chromium/src/out", 
          "commit": "ad9737b06cc56bce1dbfb53970ef32cc44584d2d", 
          "path": "Debug/gen/third_party/WebKit/public/platform/modules/background_sync/background_sync.mojom.h"
        }, 
        "name": "src/out/Debug/gen/third_party/WebKit/public/platform/modules/background_sync/background_sync.mojom.h", 
        "language": "c++", 
        "changelist_num": "ad9737b06cc56bce1dbfb53970ef32cc44584d2d", 
        "package_name": "chromium", 
        "lines": "353", 
        "content": {
          "text": "// Copyright 2013 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#ifndef THIRD_PARTY_WEBKIT_PUBLIC_PLATFORM_MODULES_BACKGROUND_SYNC_BACKGROUND_SYNC_MOJOM_H_\n#define THIRD_PARTY_WEBKIT_PUBLIC_PLATFORM_MODULES_BACKGROUND_SYNC_BACKGROUND_SYNC_MOJOM_H_\n\n#include <stdint.h>\n\n#include <limits>\n#include <type_traits>\n#include <utility>\n\n#include \"base/callback.h\"\n#include \"base/macros.h\"\n#include \"base/optional.h\"\n\n#include \"mojo/public/cpp/bindings/mojo_features.h\"\n#if BUILDFLAG(MOJO_TRACE_ENABLED)\n#include \"base/trace_event/trace_event.h\"\n#endif\n#include \"mojo/public/cpp/bindings/associated_interface_ptr.h\"\n#include \"mojo/public/cpp/bindings/associated_interface_ptr_info.h\"\n#include \"mojo/public/cpp/bindings/associated_interface_request.h\"\n#include \"mojo/public/cpp/bindings/clone_traits.h\"\n#include \"mojo/public/cpp/bindings/equals_traits.h\"\n#include \"mojo/public/cpp/bindings/interface_ptr.h\"\n#include \"mojo/public/cpp/bindings/interface_request.h\"\n#include \"mojo/public/cpp/bindings/lib/control_message_handler.h\"\n#include \"mojo/public/cpp/bindings/lib/control_message_proxy.h\"\n#include \"mojo/public/cpp/bindings/lib/serialization.h\"\n#include \"mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h\"\n#include \"mojo/public/cpp/bindings/struct_ptr.h\"\n#include \"mojo/public/cpp/bindings/struct_traits.h\"\n#include \"mojo/public/cpp/bindings/thread_safe_interface_ptr.h\"\n#include \"mojo/public/cpp/bindings/union_traits.h\"\n#include \"third_party/WebKit/public/platform/modules/background_sync/background_sync.mojom-shared.h\"\n#include <string>\n#include <vector>\n\n\n#include \"mojo/public/cpp/bindings/lib/native_struct_serialization.h\"\n#include \"content/common/content_export.h\"\n\n\nnamespace blink {\nnamespace mojom {\nclass BackgroundSyncService;\nusing BackgroundSyncServicePtr = mojo::InterfacePtr<BackgroundSyncService>;\nusing BackgroundSyncServicePtrInfo = mojo::InterfacePtrInfo<BackgroundSyncService>;\nusing ThreadSafeBackgroundSyncServicePtr =\n    mojo::ThreadSafeInterfacePtr<BackgroundSyncService>;\nusing BackgroundSyncServiceRequest = mojo::InterfaceRequest<BackgroundSyncService>;\nusing BackgroundSyncServiceAssociatedPtr =\n    mojo::AssociatedInterfacePtr<BackgroundSyncService>;\nusing ThreadSafeBackgroundSyncServiceAssociatedPtr =\n    mojo::ThreadSafeAssociatedInterfacePtr<BackgroundSyncService>;\nusing BackgroundSyncServiceAssociatedPtrInfo =\n    mojo::AssociatedInterfacePtrInfo<BackgroundSyncService>;\nusing BackgroundSyncServiceAssociatedRequest =\n    mojo::AssociatedInterfaceRequest<BackgroundSyncService>;\n\nclass SyncRegistration;\nusing SyncRegistrationPtr = mojo::InlinedStructPtr<SyncRegistration>;\n\n\nclass BackgroundSyncServiceProxy;\n\ntemplate <typename ImplRefTraits>\nclass BackgroundSyncServiceStub;\n\nclass BackgroundSyncServiceRequestValidator;\nclass BackgroundSyncServiceResponseValidator;\n\nclass CONTENT_EXPORT BackgroundSyncService\n    : public BackgroundSyncServiceInterfaceBase {\n public:\n  static const char Name_[];\n  static constexpr uint32_t Version_ = 0;\n  static constexpr bool PassesAssociatedKinds_ = false;\n  static constexpr bool HasSyncMethods_ = false;\n\n  using Proxy_ = BackgroundSyncServiceProxy;\n\n  template <typename ImplRefTraits>\n  using Stub_ = BackgroundSyncServiceStub<ImplRefTraits>;\n\n  using RequestValidator_ = BackgroundSyncServiceRequestValidator;\n  using ResponseValidator_ = BackgroundSyncServiceResponseValidator;\n  enum MethodMinVersions : uint32_t {\n    kRegisterMinVersion = 0,\n    kGetRegistrationsMinVersion = 0,\n  };\n  virtual ~BackgroundSyncService() {}\n\n\n  using RegisterCallback = base::OnceCallback<void(BackgroundSyncError, SyncRegistrationPtr)>;\n  virtual void Register(SyncRegistrationPtr options, int64_t service_worker_registration_id, RegisterCallback callback) = 0;\n\n\n  using GetRegistrationsCallback = base::OnceCallback<void(BackgroundSyncError, std::vector<SyncRegistrationPtr>)>;\n  virtual void GetRegistrations(int64_t service_worker_registration_id, GetRegistrationsCallback callback) = 0;\n};\nclass CONTENT_EXPORT BackgroundSyncServiceInterceptorForTesting : public BackgroundSyncService {\n  virtual BackgroundSyncService* GetForwardingInterface() = 0;\n  void Register(SyncRegistrationPtr options, int64_t service_worker_registration_id, RegisterCallback callback) override;\n  void GetRegistrations(int64_t service_worker_registration_id, GetRegistrationsCallback callback) override;\n};\nclass CONTENT_EXPORT BackgroundSyncServiceAsyncWaiter {\n public:\n  explicit BackgroundSyncServiceAsyncWaiter(BackgroundSyncService* proxy);\n  ~BackgroundSyncServiceAsyncWaiter();\n  void Register(\n      SyncRegistrationPtr options, int64_t service_worker_registration_id, BackgroundSyncError* out_err, SyncRegistrationPtr* out_options);\n  void GetRegistrations(\n      int64_t service_worker_registration_id, BackgroundSyncError* out_err, std::vector<SyncRegistrationPtr>* out_registrations);\n\n private:\n  BackgroundSyncService* const proxy_;\n\n  DISALLOW_COPY_AND_ASSIGN(BackgroundSyncServiceAsyncWaiter);\n};\n\nclass CONTENT_EXPORT BackgroundSyncServiceProxy\n    : public BackgroundSyncService {\n public:\n  explicit BackgroundSyncServiceProxy(mojo::MessageReceiverWithResponder* receiver);\n  void Register(SyncRegistrationPtr options, int64_t service_worker_registration_id, RegisterCallback callback) final;\n  void GetRegistrations(int64_t service_worker_registration_id, GetRegistrationsCallback callback) final;\n\n private:\n  mojo::MessageReceiverWithResponder* receiver_;\n};\nclass CONTENT_EXPORT BackgroundSyncServiceStubDispatch {\n public:\n  static bool Accept(BackgroundSyncService* impl, mojo::Message* message);\n  static bool AcceptWithResponder(\n      BackgroundSyncService* impl,\n      mojo::Message* message,\n      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);\n};\n\ntemplate <typename ImplRefTraits =\n              mojo::RawPtrImplRefTraits<BackgroundSyncService>>\nclass BackgroundSyncServiceStub\n    : public mojo::MessageReceiverWithResponderStatus {\n public:\n  using ImplPointerType = typename ImplRefTraits::PointerType;\n\n  BackgroundSyncServiceStub() {}\n  ~BackgroundSyncServiceStub() override {}\n\n  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }\n  ImplPointerType& sink() { return sink_; }\n\n  bool Accept(mojo::Message* message) override {\n    if (ImplRefTraits::IsNull(sink_))\n      return false;\n    return BackgroundSyncServiceStubDispatch::Accept(\n        ImplRefTraits::GetRawPointer(&sink_), message);\n  }\n\n  bool AcceptWithResponder(\n      mojo::Message* message,\n      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {\n    if (ImplRefTraits::IsNull(sink_))\n      return false;\n    return BackgroundSyncServiceStubDispatch::AcceptWithResponder(\n        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));\n  }\n\n private:\n  ImplPointerType sink_;\n};\nclass CONTENT_EXPORT BackgroundSyncServiceRequestValidator : public mojo::MessageReceiver {\n public:\n  bool Accept(mojo::Message* message) override;\n};\nclass CONTENT_EXPORT BackgroundSyncServiceResponseValidator : public mojo::MessageReceiver {\n public:\n  bool Accept(mojo::Message* message) override;\n};\n\n\nclass CONTENT_EXPORT SyncRegistration {\n public:\n  using DataView = SyncRegistrationDataView;\n  using Data_ = internal::SyncRegistration_Data;\n\n  template <typename... Args>\n  static SyncRegistrationPtr New(Args&&... args) {\n    return SyncRegistrationPtr(\n        base::in_place,\n        std::forward<Args>(args)...);\n  }\n\n  template <typename U>\n  static SyncRegistrationPtr From(const U& u) {\n    return mojo::TypeConverter<SyncRegistrationPtr, U>::Convert(u);\n  }\n\n  template <typename U>\n  U To() const {\n    return mojo::TypeConverter<U, SyncRegistration>::Convert(*this);\n  }\n\n\n  SyncRegistration();\n\n  SyncRegistration(\n      int64_t id,\n      const std::string& tag,\n      BackgroundSyncNetworkState network_state);\n\n  ~SyncRegistration();\n\n  // Clone() is a template so it is only instantiated if it is used. Thus, the\n  // bindings generator does not need to know whether Clone() or copy\n  // constructor/assignment are available for members.\n  template <typename StructPtrType = SyncRegistrationPtr>\n  SyncRegistrationPtr Clone() const;\n\n  // Equals() is a template so it is only instantiated if it is used. Thus, the\n  // bindings generator does not need to know whether Equals() or == operator\n  // are available for members.\n  template <typename T,\n            typename std::enable_if<std::is_same<\n                T, SyncRegistration>::value>::type* = nullptr>\n  bool Equals(const T& other) const;\n  size_t Hash(size_t seed) const;\n\n  template <typename UserType>\n  static std::vector<uint8_t> Serialize(UserType* input) {\n    return mojo::internal::SerializeImpl<\n        SyncRegistration::DataView, std::vector<uint8_t>>(input);\n  }\n\n  template <typename UserType>\n  static mojo::Message SerializeAsMessage(UserType* input) {\n    return mojo::internal::SerializeAsMessageImpl<\n        SyncRegistration::DataView>(input);\n  }\n\n  // The returned Message is serialized only if the message is moved\n  // cross-process or cross-language. Otherwise if the message is Deserialized\n  // as the same UserType |input| will just be moved to |output| in\n  // DeserializeFromMessage.\n  template <typename UserType>\n  static mojo::Message WrapAsMessage(UserType input) {\n    return mojo::Message(std::make_unique<\n        internal::SyncRegistration_UnserializedMessageContext<\n            UserType, SyncRegistration::DataView>>(0, 0, std::move(input)));\n  }\n\n  template <typename UserType>\n  static bool Deserialize(const void* data,\n                          size_t data_num_bytes,\n                          UserType* output) {\n    return mojo::internal::DeserializeImpl<SyncRegistration::DataView>(\n        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);\n  }\n\n  template <typename UserType>\n  static bool Deserialize(const std::vector<uint8_t>& input,\n                          UserType* output) {\n    return SyncRegistration::Deserialize(\n        input.size() == 0 ? nullptr : &input.front(), input.size(), output);\n  }\n\n  template <typename UserType>\n  static bool DeserializeFromMessage(mojo::Message input,\n                                     UserType* output) {\n    auto context = input.TakeUnserializedContext<\n        internal::SyncRegistration_UnserializedMessageContext<\n            UserType, SyncRegistration::DataView>>();\n    if (context) {\n      *output = std::move(context->TakeData());\n      return true;\n    }\n    input.SerializeIfNecessary();\n    return mojo::internal::DeserializeImpl<SyncRegistration::DataView>(\n        input.payload(), input.payload_num_bytes(),\n        std::move(*input.mutable_handles()), output, Validate);\n  }\n\n  int64_t id;\n  std::string tag;\n  BackgroundSyncNetworkState network_state;\n\n private:\n  static bool Validate(const void* data,\n                       mojo::internal::ValidationContext* validation_context);\n};\n\n\n\n\ntemplate <typename StructPtrType>\nSyncRegistrationPtr SyncRegistration::Clone() const {\n  return New(\n      mojo::Clone(id),\n      mojo::Clone(tag),\n      mojo::Clone(network_state)\n  );\n}\n\ntemplate <typename T,\n          typename std::enable_if<std::is_same<\n              T, SyncRegistration>::value>::type*>\nbool SyncRegistration::Equals(const T& other) const {\n  if (!mojo::Equals(this->id, other.id))\n    return false;\n  if (!mojo::Equals(this->tag, other.tag))\n    return false;\n  if (!mojo::Equals(this->network_state, other.network_state))\n    return false;\n  return true;\n}\n\n\n}  // namespace mojom\n}  // namespace blink\n\nnamespace mojo {\n\n\ntemplate <>\nstruct CONTENT_EXPORT StructTraits<::blink::mojom::SyncRegistration::DataView,\n                                         ::blink::mojom::SyncRegistrationPtr> {\n  static bool IsNull(const ::blink::mojom::SyncRegistrationPtr& input) { return !input; }\n  static void SetToNull(::blink::mojom::SyncRegistrationPtr* output) { output->reset(); }\n\n  static decltype(::blink::mojom::SyncRegistration::id) id(\n      const ::blink::mojom::SyncRegistrationPtr& input) {\n    return input->id;\n  }\n\n  static const decltype(::blink::mojom::SyncRegistration::tag)& tag(\n      const ::blink::mojom::SyncRegistrationPtr& input) {\n    return input->tag;\n  }\n\n  static decltype(::blink::mojom::SyncRegistration::network_state) network_state(\n      const ::blink::mojom::SyncRegistrationPtr& input) {\n    return input->network_state;\n  }\n\n  static bool Read(::blink::mojom::SyncRegistration::DataView input, ::blink::mojom::SyncRegistrationPtr* output);\n};\n\n}  // namespace mojo\n\n#endif  // THIRD_PARTY_WEBKIT_PUBLIC_PLATFORM_MODULES_BACKGROUND_SYNC_BACKGROUND_SYNC_MOJOM_H_"
        }, 
        "generated": true, 
        "mime_type": "text/plain", 
        "size": "12727", 
        "type": 1, 
        "md5": "04e35139d89ff07ed5370a188a7cc8dc", 
        "codeblock": [
          {
            "type": 40, 
            "name": "THIRD_PARTY_WEBKIT_PUBLIC_PLATFORM_MODULES_BACKGROUND_SYNC_BACKGROUND_SYNC_MOJOM_H_", 
            "text_range": {
              "start_line": 6, 
              "end_line": 7, 
              "start_column": 1, 
              "end_column": 1
            }, 
            "signature": ""
          }, 
          {
            "child": [
              {
                "child": [
                  {
                    "name": "BackgroundSyncService", 
                    "signature": "", 
                    "child": [
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "Name_", 
                        "signature": "", 
                        "name_prefix": "", 
                        "type": 9, 
                        "text_range": {
                          "start_line": 78, 
                          "end_line": 78, 
                          "start_column": 3, 
                          "end_column": 29
                        }
                      }, 
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "Version_", 
                        "signature": "", 
                        "name_prefix": "", 
                        "type": 9, 
                        "text_range": {
                          "start_line": 79, 
                          "end_line": 79, 
                          "start_column": 3, 
                          "end_column": 42
                        }
                      }, 
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "PassesAssociatedKinds_", 
                        "signature": "", 
                        "name_prefix": "", 
                        "type": 9, 
                        "text_range": {
                          "start_line": 80, 
                          "end_line": 80, 
                          "start_column": 3, 
                          "end_column": 56
                        }
                      }, 
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "HasSyncMethods_", 
                        "signature": "", 
                        "name_prefix": "", 
                        "type": 9, 
                        "text_range": {
                          "start_line": 81, 
                          "end_line": 81, 
                          "start_column": 3, 
                          "end_column": 49
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "~BackgroundSyncService", 
                        "signature": "()", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 94, 
                          "end_line": 94, 
                          "start_column": 3, 
                          "end_column": 38
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "Register", 
                        "signature": "(SyncRegistrationPtr options, int64_t service_worker_registration_id, RegisterCallback callback)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 98, 
                          "end_line": 98, 
                          "start_column": 3, 
                          "end_column": 125
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "GetRegistrations", 
                        "signature": "(int64_t service_worker_registration_id, GetRegistrationsCallback callback)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 102, 
                          "end_line": 102, 
                          "start_column": 3, 
                          "end_column": 112
                        }
                      }
                    ], 
                    "name_prefix": "", 
                    "type": 1, 
                    "text_range": {
                      "start_line": 75, 
                      "end_line": 103, 
                      "start_column": 1, 
                      "end_column": 2
                    }
                  }, 
                  {
                    "name": "BackgroundSyncServiceInterceptorForTesting", 
                    "signature": "", 
                    "child": [
                      {
                        "modifiers": {
                          "private": true
                        }, 
                        "name": "GetForwardingInterface", 
                        "signature": "()", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 105, 
                          "end_line": 105, 
                          "start_column": 3, 
                          "end_column": 63
                        }
                      }, 
                      {
                        "modifiers": {
                          "private": true
                        }, 
                        "name": "Register", 
                        "signature": "(SyncRegistrationPtr options, int64_t service_worker_registration_id, RegisterCallback callback)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 106, 
                          "end_line": 106, 
                          "start_column": 3, 
                          "end_column": 122
                        }
                      }, 
                      {
                        "modifiers": {
                          "private": true
                        }, 
                        "name": "GetRegistrations", 
                        "signature": "(int64_t service_worker_registration_id, GetRegistrationsCallback callback)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 107, 
                          "end_line": 107, 
                          "start_column": 3, 
                          "end_column": 109
                        }
                      }
                    ], 
                    "name_prefix": "", 
                    "type": 1, 
                    "text_range": {
                      "start_line": 104, 
                      "end_line": 108, 
                      "start_column": 1, 
                      "end_column": 2
                    }
                  }, 
                  {
                    "name": "BackgroundSyncServiceAsyncWaiter", 
                    "signature": "", 
                    "child": [
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "BackgroundSyncServiceAsyncWaiter", 
                        "signature": "(BackgroundSyncService* proxy)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 111, 
                          "end_line": 111, 
                          "start_column": 3, 
                          "end_column": 75
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "~BackgroundSyncServiceAsyncWaiter", 
                        "signature": "()", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 112, 
                          "end_line": 112, 
                          "start_column": 3, 
                          "end_column": 39
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "Register", 
                        "signature": "(SyncRegistrationPtr options, int64_t service_worker_registration_id, BackgroundSyncError* out_err, SyncRegistrationPtr* out_options)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 113, 
                          "end_line": 114, 
                          "start_column": 3, 
                          "end_column": 140
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "GetRegistrations", 
                        "signature": "(int64_t service_worker_registration_id, BackgroundSyncError* out_err, std::vector<SyncRegistrationPtr>* out_registrations)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 115, 
                          "end_line": 116, 
                          "start_column": 3, 
                          "end_column": 130
                        }
                      }, 
                      {
                        "modifiers": {
                          "private": true
                        }, 
                        "name": "proxy_", 
                        "signature": "", 
                        "name_prefix": "", 
                        "type": 9, 
                        "text_range": {
                          "start_line": 119, 
                          "end_line": 119, 
                          "start_column": 3, 
                          "end_column": 39
                        }
                      }
                    ], 
                    "name_prefix": "", 
                    "type": 1, 
                    "text_range": {
                      "start_line": 109, 
                      "end_line": 122, 
                      "start_column": 1, 
                      "end_column": 2
                    }
                  }, 
                  {
                    "name": "BackgroundSyncServiceProxy", 
                    "signature": "", 
                    "child": [
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "BackgroundSyncServiceProxy", 
                        "signature": "(mojo::MessageReceiverWithResponder* receiver)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 127, 
                          "end_line": 127, 
                          "start_column": 3, 
                          "end_column": 85
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "Register", 
                        "signature": "(SyncRegistrationPtr options, int64_t service_worker_registration_id, RegisterCallback callback)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 128, 
                          "end_line": 128, 
                          "start_column": 3, 
                          "end_column": 119
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "GetRegistrations", 
                        "signature": "(int64_t service_worker_registration_id, GetRegistrationsCallback callback)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 129, 
                          "end_line": 129, 
                          "start_column": 3, 
                          "end_column": 106
                        }
                      }, 
                      {
                        "modifiers": {
                          "private": true
                        }, 
                        "name": "receiver_", 
                        "signature": "", 
                        "name_prefix": "", 
                        "type": 9, 
                        "text_range": {
                          "start_line": 132, 
                          "end_line": 132, 
                          "start_column": 3, 
                          "end_column": 49
                        }
                      }
                    ], 
                    "name_prefix": "", 
                    "type": 1, 
                    "text_range": {
                      "start_line": 124, 
                      "end_line": 133, 
                      "start_column": 1, 
                      "end_column": 2
                    }
                  }, 
                  {
                    "name": "BackgroundSyncServiceStubDispatch", 
                    "signature": "", 
                    "child": [
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "Accept", 
                        "signature": "(BackgroundSyncService* impl, mojo::Message* message)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 136, 
                          "end_line": 136, 
                          "start_column": 3, 
                          "end_column": 75
                        }
                      }, 
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "AcceptWithResponder", 
                        "signature": "(BackgroundSyncService* impl, mojo::Message* message, std::unique_ptr<mojo::MessageReceiverWithStatus> responder)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 137, 
                          "end_line": 140, 
                          "start_column": 3, 
                          "end_column": 67
                        }
                      }
                    ], 
                    "name_prefix": "", 
                    "type": 1, 
                    "text_range": {
                      "start_line": 134, 
                      "end_line": 141, 
                      "start_column": 1, 
                      "end_column": 2
                    }
                  }, 
                  {
                    "name": "BackgroundSyncServiceStub", 
                    "signature": "", 
                    "child": [
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "BackgroundSyncServiceStub", 
                        "signature": "()", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 150, 
                          "end_line": 150, 
                          "start_column": 3, 
                          "end_column": 33
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "~BackgroundSyncServiceStub", 
                        "signature": "()", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 151, 
                          "end_line": 151, 
                          "start_column": 3, 
                          "end_column": 43
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "set_sink", 
                        "signature": "(ImplPointerType sink)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 153, 
                          "end_line": 153, 
                          "start_column": 3, 
                          "end_column": 67
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "sink", 
                        "signature": "()", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 154, 
                          "end_line": 154, 
                          "start_column": 3, 
                          "end_column": 44
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "Accept", 
                        "signature": "(mojo::Message* message)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 156, 
                          "end_line": 161, 
                          "start_column": 3, 
                          "end_column": 4
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "AcceptWithResponder", 
                        "signature": "(mojo::Message* message, std::unique_ptr<mojo::MessageReceiverWithStatus> responder)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 163, 
                          "end_line": 170, 
                          "start_column": 3, 
                          "end_column": 4
                        }
                      }, 
                      {
                        "modifiers": {
                          "private": true
                        }, 
                        "name": "sink_", 
                        "signature": "", 
                        "name_prefix": "", 
                        "type": 9, 
                        "text_range": {
                          "start_line": 173, 
                          "end_line": 173, 
                          "start_column": 3, 
                          "end_column": 25
                        }
                      }
                    ], 
                    "name_prefix": "", 
                    "type": 1, 
                    "text_range": {
                      "start_line": 145, 
                      "end_line": 174, 
                      "start_column": 1, 
                      "end_column": 2
                    }
                  }, 
                  {
                    "name": "BackgroundSyncServiceRequestValidator", 
                    "signature": "", 
                    "child": [
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "Accept", 
                        "signature": "(mojo::Message* message)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 177, 
                          "end_line": 177, 
                          "start_column": 3, 
                          "end_column": 48
                        }
                      }
                    ], 
                    "name_prefix": "", 
                    "type": 1, 
                    "text_range": {
                      "start_line": 175, 
                      "end_line": 178, 
                      "start_column": 1, 
                      "end_column": 2
                    }
                  }, 
                  {
                    "name": "BackgroundSyncServiceResponseValidator", 
                    "signature": "", 
                    "child": [
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "Accept", 
                        "signature": "(mojo::Message* message)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 181, 
                          "end_line": 181, 
                          "start_column": 3, 
                          "end_column": 48
                        }
                      }
                    ], 
                    "name_prefix": "", 
                    "type": 1, 
                    "text_range": {
                      "start_line": 179, 
                      "end_line": 182, 
                      "start_column": 1, 
                      "end_column": 2
                    }
                  }, 
                  {
                    "name": "SyncRegistration", 
                    "signature": "", 
                    "child": [
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "New", 
                        "signature": "(Args&&... args)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 191, 
                          "end_line": 195, 
                          "start_column": 3, 
                          "end_column": 4
                        }
                      }, 
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "From", 
                        "signature": "(const U& u)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 198, 
                          "end_line": 200, 
                          "start_column": 3, 
                          "end_column": 4
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "To", 
                        "signature": "()", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 203, 
                          "end_line": 205, 
                          "start_column": 3, 
                          "end_column": 4
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "SyncRegistration", 
                        "signature": "()", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 208, 
                          "end_line": 208, 
                          "start_column": 3, 
                          "end_column": 22
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "SyncRegistration", 
                        "signature": "(int64_t id, const std::string& tag, BackgroundSyncNetworkState network_state)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 210, 
                          "end_line": 213, 
                          "start_column": 3, 
                          "end_column": 49
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "~SyncRegistration", 
                        "signature": "()", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 215, 
                          "end_line": 215, 
                          "start_column": 3, 
                          "end_column": 23
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "Clone", 
                        "signature": "()", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 221, 
                          "end_line": 221, 
                          "start_column": 3, 
                          "end_column": 37
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "Equals", 
                        "signature": "(const T& other)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 229, 
                          "end_line": 229, 
                          "start_column": 3, 
                          "end_column": 37
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "Hash", 
                        "signature": "(size_t seed)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 230, 
                          "end_line": 230, 
                          "start_column": 3, 
                          "end_column": 34
                        }
                      }, 
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "Serialize", 
                        "signature": "(UserType* input)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 233, 
                          "end_line": 236, 
                          "start_column": 3, 
                          "end_column": 4
                        }
                      }, 
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "SerializeAsMessage", 
                        "signature": "(UserType* input)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 239, 
                          "end_line": 242, 
                          "start_column": 3, 
                          "end_column": 4
                        }
                      }, 
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "WrapAsMessage", 
                        "signature": "(UserType input)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 249, 
                          "end_line": 253, 
                          "start_column": 3, 
                          "end_column": 4
                        }
                      }, 
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "Deserialize", 
                        "signature": "(const void* data, size_t data_num_bytes, UserType* output)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 256, 
                          "end_line": 261, 
                          "start_column": 3, 
                          "end_column": 4
                        }
                      }, 
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "Deserialize", 
                        "signature": "(const std::vector<uint8_t>& input, UserType* output)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 264, 
                          "end_line": 268, 
                          "start_column": 3, 
                          "end_column": 4
                        }
                      }, 
                      {
                        "modifiers": {
                          "static": true, 
                          "public": true
                        }, 
                        "name": "DeserializeFromMessage", 
                        "signature": "(mojo::Message input, UserType* output)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 271, 
                          "end_line": 284, 
                          "start_column": 3, 
                          "end_column": 4
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "id", 
                        "signature": "", 
                        "name_prefix": "", 
                        "type": 9, 
                        "text_range": {
                          "start_line": 286, 
                          "end_line": 286, 
                          "start_column": 3, 
                          "end_column": 14
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "tag", 
                        "signature": "", 
                        "name_prefix": "", 
                        "type": 9, 
                        "text_range": {
                          "start_line": 287, 
                          "end_line": 287, 
                          "start_column": 3, 
                          "end_column": 19
                        }
                      }, 
                      {
                        "modifiers": {
                          "public": true
                        }, 
                        "name": "network_state", 
                        "signature": "", 
                        "name_prefix": "", 
                        "type": 9, 
                        "text_range": {
                          "start_line": 288, 
                          "end_line": 288, 
                          "start_column": 3, 
                          "end_column": 44
                        }
                      }, 
                      {
                        "modifiers": {
                          "static": true, 
                          "private": true
                        }, 
                        "name": "Validate", 
                        "signature": "(const void* data, mojo::internal::ValidationContext* validation_context)", 
                        "name_prefix": "", 
                        "type": 8, 
                        "text_range": {
                          "start_line": 291, 
                          "end_line": 292, 
                          "start_column": 3, 
                          "end_column": 79
                        }
                      }
                    ], 
                    "name_prefix": "", 
                    "type": 1, 
                    "text_range": {
                      "start_line": 185, 
                      "end_line": 293, 
                      "start_column": 1, 
                      "end_column": 2
                    }
                  }, 
                  {
                    "name_prefix": "SyncRegistration::", 
                    "type": 8, 
                    "name": "Clone", 
                    "text_range": {
                      "start_line": 299, 
                      "end_line": 305, 
                      "start_column": 1, 
                      "end_column": 2
                    }, 
                    "signature": "()"
                  }, 
                  {
                    "name_prefix": "SyncRegistration::", 
                    "type": 8, 
                    "name": "Equals", 
                    "text_range": {
                      "start_line": 310, 
                      "end_line": 318, 
                      "start_column": 1, 
                      "end_column": 2
                    }, 
                    "signature": "(const T& other)"
                  }
                ], 
                "type": 11, 
                "name": "mojom", 
                "text_range": {
                  "start_line": 47, 
                  "end_line": 321, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "signature": ""
              }
            ], 
            "type": 11, 
            "name": "blink", 
            "text_range": {
              "start_line": 46, 
              "end_line": 322, 
              "start_column": 1, 
              "end_column": 2
            }, 
            "signature": ""
          }, 
          {
            "child": [
              {
                "name_prefix": "", 
                "type": 8, 
                "name": "StructTraits", 
                "text_range": {
                  "start_line": 328, 
                  "end_line": 349, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "signature": "(const ::blink::mojom::SyncRegistrationPtr& input)"
              }
            ], 
            "type": 11, 
            "name": "mojo", 
            "text_range": {
              "start_line": 324, 
              "end_line": 351, 
              "start_column": 1, 
              "end_column": 2
            }, 
            "signature": ""
          }
        ]
      }, 
      "return_code": 1
    }
  ]
}